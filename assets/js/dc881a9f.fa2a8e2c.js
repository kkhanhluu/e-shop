"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[539],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,m=u["".concat(s,".").concat(d)]||u[d]||g[d]||o;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4176:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const o={title:"gRPC",slug:"gRPC",sidebar_position:6},a="gRPC",p={unversionedId:"explore/code/grpc",id:"explore/code/grpc",title:"gRPC",description:"gRPC is a high-performance communication protocol based on HTTP/2 and protocol buffers. Its main benefits over using HTTP with JSON are:",source:"@site/docs/explore/code/grpc.md",sourceDirName:"explore/code",slug:"/explore/code/gRPC",permalink:"/e-shop/explore/code/gRPC",draft:!1,editUrl:"https://github.com/kkhanhluu/eshop/docs/explore/code/grpc.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"gRPC",slug:"gRPC",sidebar_position:6},sidebar:"docs",previous:{title:"Saga pattern",permalink:"/e-shop/explore/code/saga-pattern"}},s={},c=[{value:"gRPC implementation in e-shop",id:"grpc-implementation-in-e-shop",level:2},{value:"Creating gRPC server",id:"creating-grpc-server",level:3},{value:"Creating gRPC client",id:"creating-grpc-client",level:3}],l={toc:c},u="wrapper";function g(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"grpc"},"gRPC"),(0,i.kt)("p",null,"gRPC is a high-performance communication protocol based on HTTP/2 and protocol buffers. Its main benefits over using HTTP with JSON are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Protocol buffers are binary, high-performance serialization mechanism. Depending on implementation, it can be 8x faster and message size can be around 60% - 80% smaller"),(0,i.kt)("li",{parentName:"ul"},"Contract between service and client is explicit (by using ",(0,i.kt)("inlineCode",{parentName:"li"},"proto")," files)")),(0,i.kt)("h2",{id:"grpc-implementation-in-e-shop"},"gRPC implementation in e-shop"),(0,i.kt)("p",null,"In this current implementation, the communication between API Gateway and microservices leverages the usage of gRPC. gRPC is language agnostic: all services are defined using ",(0,i.kt)("inlineCode",{parentName:"p"},"proto")," files. These files are based on the ",(0,i.kt)("a",{parentName:"p",href:"https://protobuf.dev/programming-guides/proto2/"},"protobuffer language")," and can be found in the shared library ",(0,i.kt)("inlineCode",{parentName:"p"},"grpc")," under ",(0,i.kt)("inlineCode",{parentName:"p"},"libs/grpc/src/main/proto"),". Here is an example of a ",(0,i.kt)("inlineCode",{parentName:"p"},"proto")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'syntax = "proto3";\n\npackage eshop.userService.grpc;\n\noption java_multiple_files = true;\noption java_package = "eshop.userService.grpc";\noption java_outer_classname = "UserServiceProto";\n\nservice UserService {\n  rpc getUserById(GetUserByIdRequest) returns (User) {}\n}\n\nmessage User {\n  string id = 1;\n  string email = 2;\n  string username = 3;\n}\n\nmessage GetUserByIdRequest {\n  string productId = 1;\n}\n')),(0,i.kt)("h3",{id:"creating-grpc-server"},"Creating gRPC server"),(0,i.kt)("p",null,"Each microservice is a gRPC server, which leverages ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/yidongnan/grpc-spring-boot-starter"},"grpc-server-spring-boot-starter")," to setup a gRPC server. In order to implement the endpoint, you need to annotate the service with ",(0,i.kt)("inlineCode",{parentName:"p"},"GRPCService")," and implements the interface, which was auto-generated by the starter. Here's an example of a gRPC server in this application"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@GrpcService\n@RequiredArgsConstructor\npublic class InventoryServiceProtoServiceImpl extends InventoryServiceGrpc.InventoryServiceImplBase {\n\n    @Override\n    public void getInventoryByProductId(GetInventoryByProductIdRequest request,\n                                        StreamObserver<Inventory> responseObserver) {\n            // Your application code...\n    }\n}\n")),(0,i.kt)("h3",{id:"creating-grpc-client"},"Creating gRPC client"),(0,i.kt)("p",null,"gRPC is language agnostic, though gRPC servers are implemented with ",(0,i.kt)("inlineCode",{parentName:"p"},"Java"),", the clients can be implemented by any other programming language. In this case, the client is written in ",(0,i.kt)("inlineCode",{parentName:"p"},"API gateway")," with Javascript/Node.js. This project uses ",(0,i.kt)("a",{parentName:"p",href:"https://buf.build/docs/"},"Buf")," to auto generate ",(0,i.kt)("inlineCode",{parentName:"p"},"typescript")," types from ",(0,i.kt)("inlineCode",{parentName:"p"},"proto")," definition files. It ensures that the client is fully type-safe."))}g.isMDXComponent=!0}}]);